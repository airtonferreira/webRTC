<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>WebRTC Challenge - Receiver</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='../public/style.css'>
    <script src="https://kit.fontawesome.com/a95e3fa0bd.js" crossorigin="anonymous"></script>
</head>

<style>
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP&display=swap');

    body {
        height: 100vh;
        line-height: 1.5;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 30px;
        font-family: 'Noto Sans JP', sans-serif;
    }

    .container1 {
        display: inline-flex;
        justify-content: center;
    }

    .container2 {
        width: 500px;
        height: 500px;

        display: flex;
        flex-flow: row wrap;
        align-items: flex-end;

    }

    .side-nav {
        background-color: rgb(55, 64, 91);

        width: 30%;
        height: 502px;
    }

    .box-messages {
        background-color: rgb(34, 42, 70);
        border: none;

        width: 100%;
        height: 90%;

        overflow: auto;

    }

    .box-message-input {
        color: white;
        background-color: rgb(55, 64, 91);
        border-left: 1px solid rgb(34, 42, 70);
        border-bottom: none;
        border-top: none;
        border-right: none;
        outline: none;
        padding-left: 20px;
        padding-right: 50px;


        width: 100%;
        height: 10%;
    }

    #sendButton {
        position: absolute;
        margin-left: 410px;

        border: none;
        background-color: transparent;
        width: 40px;
        height: 50px;

        cursor: pointer;
    }

    #sendButton i {
        color: rgb(147, 174, 255);
        font-size: 40px;
    }

    .sidebar {
        background-color: rgb(55, 64, 91);
        color: white;
        font-size: 12px;
    }

    .sidebar dd {
        margin-left: -35px;
        padding-top: 10px;
    }

    .msg-time {
        font-size: 10px;
        color: rgb(154, 154, 154);
    }

    .message {
        margin-top: 10px;
    }

    #clearMsgsButton {
        outline: none;
        color: gray;
        float: right;
        cursor: pointer;
        border: none;
        width: 100px;
        height: 20px;

        background-color: rgb(172, 172, 172, 0.2);
    }
</style>

<body>
    <div class="container1">

        <div class="side-nav">
            <ul class="sidebar">
                <dd><i class="fas fa-user"></i>&nbsp Receiver</dd>
                <dd>Status:<br>
                    <span id="status" class="status"></span>
                </dd>
                <dd id="receiver-id" title="Copie esse ID e cole no seu /sender">Seu ID:</dd>
            </ul>
        </div>

        <div class="container2">
            <div class="box-messages">
                <div class="message" id="message"></div>
                <button id="clearMsgsButton">Limpar hist√≥rico</button>
            </div>

            <input class="box-message-input" type="text" id="sendMessageBox" placeholder="Enter a message..."
                autofocus="true" />
            <button title="Enviar" type="button" id="sendButton"><i class="fas fa-angle-right"></i></button>

        </div>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.2.0/dist/peerjs.min.js"></script>
    <script type="text/javascript">
        (function () {
            var lastPeerId = null;
            var peer = null; // Own peer object
            var peerId = null;
            var conn = null;
            var recvId = document.getElementById("receiver-id");
            var status = document.getElementById("status");
            var message = document.getElementById("message");
            var standbyBox = document.getElementById("standby");
            var goBox = document.getElementById("go");
            var fadeBox = document.getElementById("fade");
            var offBox = document.getElementById("off");
            var sendMessageBox = document.getElementById("sendMessageBox");
            var sendButton = document.getElementById("sendButton");
            var clearMsgsButton = document.getElementById("clearMsgsButton");
            /**
             * Create the Peer object for our end of the connection.
             *
             * Sets up callbacks that handle any events related to our
             * peer object.
             */
            function initialize() {
                // Create own peer object with connection to shared PeerJS server
                peer = new Peer(null, {
                    debug: 2
                });
                peer.on('open', function (id) {
                    // Workaround for peer.reconnect deleting previous id
                    if (peer.id === null) {
                        console.log('Received null id from peer open');
                        peer.id = lastPeerId;
                    } else {
                        lastPeerId = peer.id;
                    }
                    console.log('ID: ' + peer.id);
                    recvId.innerHTML = "ID: " + peer.id;
                    status.innerHTML = "Awaiting connection...";
                });
                peer.on('connection', function (c) {
                    // Allow only a single connection
                    if (conn && conn.open) {
                        c.on('open', function () {
                            c.send("Already connected to another client");
                            setTimeout(function () { c.close(); }, 500);
                        });
                        return;
                    }
                    conn = c;
                    console.log("Connected to: " + conn.peer);
                    status.innerHTML = "Connected";
                    ready();
                });
                peer.on('disconnected', function () {
                    status.innerHTML = "Connection lost. Please reconnect";
                    console.log('Connection lost. Please reconnect');
                    // Workaround for peer.reconnect deleting previous id
                    peer.id = lastPeerId;
                    peer._lastServerId = lastPeerId;
                    peer.reconnect();
                });
                peer.on('close', function () {
                    conn = null;
                    status.innerHTML = "Connection destroyed. Please refresh";
                    console.log('Connection destroyed');
                });
                peer.on('error', function (err) {
                    console.log(err);
                    alert('' + err);
                });
            };
            /**
             * Triggered once a connection has been achieved.
             * Defines callbacks to handle incoming data and connection events.
             */
            function ready() {
                conn.on('data', function (data) {
                    console.log("Data recieved");
                    var cueString = "<span class=\"cueMsg\">Cue: </span>";
                    switch (data) {
                        case 'Go':
                            go();
                            addMessage(cueString + data);
                            break;
                        case 'Fade':
                            fade();
                            addMessage(cueString + data);
                            break;
                        case 'Off':
                            off();
                            addMessage(cueString + data);
                            break;
                        case 'Reset':
                            reset();
                            addMessage(cueString + data);
                            break;
                        default:
                            addMessage(`<span style="background-color: rgb(55, 64, 91); color: white; font-size: 16px; width: auto; height: 30px; border-radius: 0px 25px 25px 25px; margin-top: 5px;">&nbsp&nbspPeer: &nbsp&nbsp${data}&nbsp&nbsp</span>`);
                            break;
                    };
                });
                conn.on('close', function () {
                    status.innerHTML = "Connection reset<br>Awaiting connection...";
                    conn = null;
                });
            }
            function go() {
                standbyBox.className = "display-box hidden";
                goBox.className = "display-box go";
                fadeBox.className = "display-box hidden";
                offBox.className = "display-box hidden";
                return;
            };
            function fade() {
                standbyBox.className = "display-box hidden";
                goBox.className = "display-box hidden";
                fadeBox.className = "display-box fade";
                offBox.className = "display-box hidden";
                return;
            };
            function off() {
                standbyBox.className = "display-box hidden";
                goBox.className = "display-box hidden";
                fadeBox.className = "display-box hidden";
                offBox.className = "display-box off";
                return;
            }
            function reset() {
                standbyBox.className = "display-box standby";
                goBox.className = "display-box hidden";
                fadeBox.className = "display-box hidden";
                offBox.className = "display-box hidden";
                return;
            };
            function addMessage(msg) {
                var now = new Date();
                var h = now.getHours();
                var m = addZero(now.getMinutes());
                var s = addZero(now.getSeconds());
                if (h > 12)
                    h -= 12;
                else if (h === 0)
                    h = 12;
                function addZero(t) {
                    if (t < 10)
                        t = "0" + t;
                    return t;
                };
                message.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span> &nbsp &nbsp" + msg + message.innerHTML;
            }
            function clearMessages() {
                message.innerHTML = "";
                addMessage("Msgs cleared");
            }
            // Listen for enter in message box
            sendMessageBox.addEventListener('keypress', function (e) {
                var event = e || window.event;
                var char = event.which || event.keyCode;
                if (char == '13')
                    sendButton.click();
            });
            // Send message
            sendButton.addEventListener('click', function () {
                if (conn && conn.open) {
                    var msg = sendMessageBox.value;
                    sendMessageBox.value = "";
                    conn.send(msg);
                    console.log("Sent: " + msg)
                    addMessage(`<span style="background-color: rgb(147, 174, 255); color: white; font-size: 16px; width: auto; height: 30px; border-radius: 25px 25px 0px;">&nbsp&nbspVoc√™: &nbsp&nbsp${msg}&nbsp&nbsp</span>`);
                } else {
                    console.log('Connection is closed');
                }
            });
            // Clear messages box
            clearMsgsButton.addEventListener('click', clearMessages);
            initialize();
        })();
    </script>

</body>

</html>